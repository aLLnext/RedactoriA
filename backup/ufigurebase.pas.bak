unit UFigureBase;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils,Graphics,UFigure,Dialogs, ExtCtrls, UScale, Controls, Spin, StdCtrls, Buttons,
  UParams, LCLType, FPCanvas, TypInfo, LCL, LCLIntf, Math,
  FileUtil, Forms,fpjson, superobject, Clipbrd,
  Menus
  ;
type
  Trans = record
    transporate:boolean;
    index:integer;
    trFigure:TFigure;
  end;

  TTool = class
  public
    MaxPoint, MinPoint:TDoublePoint;
    FigureClass:TFigureClass;
    Names,Pic:string;
    ParPanel:TPanel;
    Poligon: TDoubleRect;
    PSize: TDoublePoint;
    WTop, WBottom: TDoublePoint;
    delta: integer;
    rBtnPressed:boolean;
    Transp:Trans;
    writePL: boolean;
    ADoublePoint:TDoublePoint;
    LastScrollBarHor, LastScrollBarVert: integer;
    procedure Scrolling(
      pb:TPaintBox;ScrollBarHor: TScrollBar; ScrollBarVert: TScrollBar);

    procedure ClearSelect;
    procedure MouseDown(APoint:TPoint);virtual;
    procedure MouseMove(APoint:TPoint);virtual;
    procedure MouseUp();virtual;

    procedure PPanelCreate(APanel:TPanel);virtual;
    procedure MinMaxPoints;
    procedure WriteUNDOFigures;
    procedure WriteREDOFigures;
    procedure FiguresDraw(pb:TPaintBox);
end;


  THandTool = class(TTool)
    FirstP:TPoint;
    procedure MouseDown(APoint:TPoint);override;
    procedure MouseMove(APoint:TPoint);override;
    procedure MouseUp();override;
    procedure PPanelCreate(APanel:TPanel);override;
  end;

  TMagnifierTool = class(TTool)
    FirstP:TPoint;
    procedure MouseDown(APoint:TPoint);override;
    procedure MouseMove(APoint:TPoint);override;
    procedure MouseUp();override;
    procedure PPanelCreate(APanel:TPanel);override;
  end;

  TPolyLineTool = class(TTool)
    procedure MouseDown(APoint:TPoint);override;
    procedure MouseMove(APoint:TPoint);override;
    procedure MouseUp();override;
    procedure PPanelCreate(APanel:TPanel);override;
  end;

  TLineTool = class(TTool)
    procedure MouseDown(APoint:TPoint);override;
    procedure MouseMove(APoint:TPoint);override;
    procedure MouseUp();override;
    procedure PPanelCreate(APanel:TPanel);override;
  end;

  TPenTool = class(TTool)
    procedure MouseDown(APoint:TPoint);override;
    procedure MouseMove(APoint:TPoint);override;
    procedure MouseUp();override;
    procedure PPanelCreate(APanel:TPanel);override;
  end;

  TRectangleTool = class(TTool)
    procedure MouseDown(APoint:TPoint);override;
    procedure MouseMove(APoint:TPoint);override;
    procedure MouseUp();override;
    procedure PPanelCreate(APanel:TPanel);override;
  end;

  TRoundRectTool = class(TTool)
    procedure MouseDown(APoint:TPoint);override;
    procedure MouseMove(APoint:TPoint);override;
    procedure MouseUp();override;
    procedure PPanelCreate(APanel:TPanel);override;
  end;

  TEllipseTool = class(TTool)
    procedure MouseDown(APoint:TPoint);override;
    procedure MouseMove(APoint:TPoint);override;
    procedure MouseUp();override;
    procedure PPanelCreate(APanel:TPanel);override;
  end;

  TSelectTool = class(TTool)
    FirstP:TPoint;
    iFigure:TFigure;
    GPColor:TColor;
    GPStyle:TPenStyle;
    GPWidth:integer;
    GRoundedX:integer;
    GRoundedY:integer;
    GBColor:TColor;
    GBStyle:TBrushStyle;
    bigselected:boolean;
    lineselected:boolean;
    ADPoints:Array of TDoublePoint;
    procedure MouseDown(APoint:TPoint);override;
    procedure MouseMove(APoint:TPoint);override;
    procedure MouseUp();override;
    procedure PPanelCreate(APanel:TPanel);override;
  end;

var
  Tools: array of TTool;
  AParam: TParam;

implementation

procedure PasteFigure;
begin
  if Clipboard<>nil then
    LoadFile(Clipboard.AsText);
end;

procedure CopyFigure;
var
  jObject:TJSONObject;
  iFigure:TFigure;
begin
  jObject := TJSONObject.Create;
  jObject.Add('TFigures',TJSONArray.Create);
  for iFigure in Figures do begin
    if iFigure.Selected then
      SaveFigure(iFigure,jObject);
  end;
  Clipboard.AsText:=jObject.FormatJSON();
end;

procedure SaveFigure(iFigure:TFigure;jObject:TJSONObject);
var
  jFigure:TJSONObject;
  j:integer;
begin
    jFigure:=TJSONObject.Create;
    with iFigure do begin
      jFigure.Add('name', ClassName);
      jFigure.Add('coord',TJSONArray.Create);
      for j := 0 to high(Dpoints) do begin
           jFigure.Arrays['coord'].Add(Dpoints[j].x);
           jFigure.Arrays['coord'].Add(Dpoints[j].y);
      end;
      jFigure.Add('PenColor', PColor);
      jFigure.Add('PenStyleInd', PStyleInd);
      jFigure.Add('PenWidth',PWidth);
      jFigure.Add('BrushColor', BColor);
      jFigure.Add('BrushStyleInd', BStyleInd);
      jFigure.Add('RoundedX',RoundedX);
      jFigure.Add('RoundedY',RoundedY);
  end;
  jObject.Arrays['TFigures'].Add(jFigure);
end;

function SaveFile:String;
var
  i:integer;
  jObject: TJSONObject;
begin
  jObject := TJSONObject.Create;
  jObject.Add('TFigures', TJSONArray.Create);
  for i:= 0 to High(Figures) do
  begin
    SaveFigure(Figures[i],jObject);
  end;
  Result:=jObject.FormatJSON;
end;

procedure LoadFigure(JS:ISuperObject;iFigure:TFigure);
var
  JSA1:TSuperArray;
  k,j:integer;
begin
   with iFigure do begin
     PWidth:=JS.i['PenWidth'];
     PStyleInd:=JS.i['PenStyleInd'];
     PStyle:=TypePenStyle.Style[PStyleInd];
     PColor:=JS.i['PenColor'];
     BColor:=JS.i['BrushColor'];
     BStyleInd:=JS.i['BrushStyleInd'];
     BStyle:=TypeBrushStyle.Style[BStyleInd];
     JSA1:=JS.A['coord'];
     k:=0;
     for j:=0 to (JSA1.Length div 2)-1 do begin
       SetLength(DPoints, Length(DPoints)+1);
       DPoints[high(DPoints)]:=DoublePoint(JSA1.d[k],JSA1.d[k+1]);
       K:=k+2;
     end;
   end;
end;

procedure LoadFile(S:string);
var
 JS,JS1: ISuperObject;
 JSA:TSuperArray;
 j,i:integer;
 S1:string;
begin
  JS:=SO(S);
  JSA:=(JS.A['TFigures']);
  for i:=0 to JSA.Length-1 do begin
    SetLength(Figures,Length(Figures)+1);
    S1:= SO(JSA.S[i]).S['name'];
    for j:=0 to Length(FiguresName)-1 do begin
      if FiguresName[j].ClassName=S1 then
        Figures[High(Figures)]:=FiguresName[j].Create;
    end;
    JS1:=(SO(JSA.S[i]));
    LoadFigure(JS1,Figures[High(Figures)]);
  end;
end;

procedure TTool.MouseDown(Apoint:TPoint);
begin
  ADoublePoint:=Canvas2Wrld(APoint);
  SetLength(Figures[High(Figures)].DPoints, length(Figures[High(Figures)].DPoints)+1);
  Figures[High(Figures)].DPoints[High( Figures[High(Figures)].DPoints)]:=ADoublePoint;
  SetLength(Figures[High(Figures)].DPoints, length(Figures[High(Figures)].DPoints)+1);
  Figures[High(Figures)].DPoints[High( Figures[High(Figures)].DPoints)]:=ADoublePoint;
end;

procedure TTool.MouseMove(Apoint:TPoint);
begin
  ADoublePoint:=Canvas2Wrld(APoint);
  Figures[High(Figures)].DPoints[High(Figures[High(Figures)].DPoints)]:=ADoublePoint;
end;

procedure TTool.MouseUp();
begin
end;

procedure TTool.ClearSelect;
var
  iFigure:TFigure;
begin
  for iFigure in Figures do
    if iFigure.Selected then
      iFigure.Selected:=false;
end;

procedure TTool.PPanelCreate(APanel:TPanel);
begin
  AParam.CreateSpinEdit(APanel, 'Pen Width', PenWidthInt, @AParam.PenWidthChange);
  AParam.CreateComboBox(APanel, 'Pen Style', TypePenStyle.Name, PenStyle.Index, @AParam.PenStyleChange);
  AParam.CreateColorButton(APanel, 'Pen Color', PenColor, @AParam.PenColorButtonChanged);
end;

procedure TTool.Scrolling(pb:TPaintBox;ScrollBarHor: TScrollBar;
    ScrollBarVert: TScrollBar);
begin
  Poligon :=DoubleRect(MinPoint, MaxPoint);
 WTop := Canvas2Wrld(Point(0,0));
  if Poligon.Top.X > WTop.x then
     Poligon.Top.x := WTop.x;
  if Poligon.Top.y > WTop.y then
     Poligon.Top.y := WTop.y;
  WBottom := Canvas2Wrld(Point(pb.Width, pb.Height));
  if Poligon.Bottom.x < WBottom.x then
     Poligon.Bottom.x := WBottom.x;
  if Poligon.Bottom.y < WBottom.y then
     Poligon.Bottom.y := WBottom.y;
  PSize.X := Poligon.Bottom.x - Poligon.Top.x;
  PSize.Y := Poligon.Bottom.y - Poligon.Top.y;
  if PSize.x * PSize.y = 0 then exit;

  delta := ScrollBarHor.Max - ScrollBarHor.Min;
  ScrollBarHor.PageSize := round(pb.Width / (PSize.X * Zoom) * delta);
  ScrollBarHor.Visible := ScrollBarHor.PageSize < delta;
  if ScrollBarHor.PageSize < delta then
  begin
    if (LastScrollBarHor = ScrollBarHor.Position) then
      ScrollBarHor.Position := round(((-1) * (offset.x + Poligon.Top.x)) / PSize.X * delta)
    else
      offset.x := (-1) * round(ScrollBarHor.Position / delta * PSize.x + Poligon.Top.x);
    LastScrollBarHor := ScrollBarHor.Position;
  end;

  delta := ScrollBarVert.Max - ScrollBarVert.Min;
  ScrollBarVert.PageSize := round(pb.Height / (PSize.y * Zoom) * delta);
  ScrollBarVert.Visible := ScrollBarVert.PageSize < delta;
  if ScrollBarVert.PageSize < delta then
  begin
    if (LastScrollBarVert = ScrollBarVert.Position) then
      ScrollBarVert.Position := round(((-1) * (offset.y + Poligon.Top.y)) / PSize.Y * delta)
    else
      offset.y := (-1) * round(ScrollBarVert.Position / delta * PSize.y + Poligon.Top.y);
    LastScrollBarVert := ScrollBarVert.Position;
  end;
end;

procedure TTool.MinMaxPoints;
var
  i:TFigure;
begin
  if Length(Figures)>0 then begin
  MaxPoint.x:=Figures[0].maxPoint.x;
  MinPoint.x:=Figures[0].minPoint.x;
  MaxPoint.y:=Figures[0].maxPoint.y;
  MinPoint.y:=Figures[0].minPoint.y;
  end;
  for i in Figures do begin
    if(i.maxPoint.x > MaxPoint.x) then
      MaxPoint.x:=i.maxPoint.x;
    if(i.minPoint.x < MinPoint.x) then
      MinPoint.x:=i.minPoint.x;
    if(i.maxPoint.y > MaxPoint.y) then
      MaxPoint.y:=i.maxPoint.y;
    if(i.minPoint.y < MinPoint.y) then
      MinPoint.y:=i.minPoint.y;
  end;
end;

procedure THandTool.MouseDown(APoint:TPoint);
begin
  FirstP:=APoint;
end;

procedure THandTool.MouseMove(APoint:TPoint);
begin
  Offset.x += round((APoint.x - FirstP.x)/Zoom);
  Offset.y += round((APoint.y - FirstP.y)/Zoom);
  FirstP:=APoint;
end;

procedure THandTool.MouseUp();
begin

end;

procedure THandTool.PPanelCreate(APanel: TPanel);
begin

end;

procedure TLineTool.MouseDown(APoint:TPoint);
begin
  SetLength(Figures, Length(Figures) + 1);
  Figures[High(Figures)] := TLine.Create;
  inherited;
end;

procedure TLineTool.MouseMove(APoint:TPoint);
begin
  inherited;
end;

procedure TLineTool.MouseUp();
begin
  inherited;
end;

procedure TLineTool.PPanelCreate(APanel: TPanel);
begin
  inherited;
end;

procedure TPolyLineTool.MouseDown(APoint:TPoint);
begin
  SetLength(Figures, Length(Figures) + 1);
  Figures[High(Figures)] := TPenLine.Create;
  inherited;
  writePL:=true;
end;

procedure TPolyLineTool.MouseMove(APoint:TPoint);
begin
  SetLength(Figures[High(Figures)].DPoints, length(Figures[High(Figures)].DPoints)+1);
  inherited;
end;

procedure TPolyLineTool.MouseUp();
begin
  inherited;
end;

procedure TPolyLineTool.PPanelCreate(APanel: TPanel);
begin
  inherited;
end;

procedure TPenTool.MouseDown(APoint:TPoint);
begin
  SetLength(Figures, Length(Figures) + 1);
  Figures[High(Figures)] := TPenLine.Create;
  inherited;
end;

procedure TPenTool.MouseMove(APoint:TPoint);
begin
  SetLength(Figures[High(Figures)].DPoints, length(Figures[High(Figures)].DPoints)+1);
  inherited;
end;

procedure TPenTool.MouseUp();
begin
  inherited;
end;

procedure TPenTool.PPanelCreate(APanel:TPanel);
begin
  inherited;
end;

procedure TRectangleTool.MouseDown(APoint:TPoint);
begin
  SetLength(Figures, Length(Figures) + 1);
  Figures[High(Figures)] := TRectangle.Create;
  inherited;
end;

procedure TRectangleTool.MouseMove(APoint:TPoint);
begin
  inherited;
end;

procedure TRectangleTool.MouseUp();
begin
  inherited;
end;

procedure TRectangleTool.PPanelCreate (APanel: TPanel);
begin
  AParam.CreateColorButton(APanel, 'Brush Color', BrushColor, @AParam.BrushColorButtonChanged);
  AParam.CreateComboBox(APanel, 'Brush Style', TypeBrushStyle.Name, BrushStyle.Index, @AParam.BrushStyleChange);
  inherited;
end;

procedure TEllipseTool.MouseDown(APoint:TPoint);
begin
  SetLength(Figures, Length(Figures) + 1);
  Figures[High(Figures)] := TEllipse.Create;
  inherited;
end;

procedure TEllipseTool.MouseMove(APoint:TPoint);
begin
  inherited;
end;

procedure TEllipseTool.MouseUp();
begin
  inherited;
end;

procedure TEllipseTool.PPanelCreate(APanel: TPanel);
begin
  AParam.CreateColorButton(APanel, 'Brush Color', BrushColor, @AParam.BrushColorButtonChanged);
  AParam.CreateComboBox(APanel, 'Brush Style', TypeBrushStyle.Name, BrushStyle.Index, @AParam.BrushStyleChange);
  inherited;
end;

procedure TRoundRectTool.MouseDown(APoint:TPoint);
begin
  SetLength(Figures, Length(Figures) + 1);
  Figures[High(Figures)] := TRoundRect.Create;
  inherited;
end;

procedure TRoundRectTool.MouseMove(APoint:TPoint);
begin
  inherited;
end;

procedure TRoundRectTool.MouseUp();
begin
  inherited;
end;

procedure TRoundRectTool.PPanelCreate(APanel: TPanel);
begin
  AParam.CreateColorButton(APanel, 'Brush Color', BrushColor, @AParam.BrushColorButtonChanged);
  AParam.CreateComboBox(APanel, 'Brush Style', TypeBrushStyle.Name, BrushStyle.Index, @AParam.BrushStyleChange);
  AParam.CreateSpinEdit(APanel, 'Round Y', RoundY, @AParam.RoundYChange);
  AParam.CreateSpinEdit(APanel, 'Round X', RoundX, @AParam.RoundXChange);
  inherited;
end;

procedure TSelectTool.MouseDown(APoint:TPoint);
const
  k=5;
var
  i:integer;
  TL,BR:TPoint;
begin
  if not rBtnPressed then begin
    SetLength(Figures, Length(Figures) + 1);
    Figures[High(Figures)] := TSelect.Create;
    inherited;
    ADPoints:=Figures[High(Figures)].DPoints;
  end
  else if rBtnPressed  then begin
    FirstP:=APoint;
     for iFigure in Figures do begin
       if iFigure.Selected then
         for i:=0 to Length(iFigure.DPoints)do begin
           TL:=Point(Wrld2Canvas(iFigure.DPoints[i]).x-k-iFigure.PWidth div 2,Wrld2Canvas(iFigure.DPoints[i]).y-k-iFigure.PWidth div 2);
           BR:=Point(Wrld2Canvas(iFigure.DPoints[i]).x+k+iFigure.PWidth div 2,Wrld2Canvas(iFigure.DPoints[i]).y+k+iFigure.PWidth div 2);
           if iFigure.CheckRectangle(TL,BR,APoint) then begin
             Transp.transporate:=true;
             Transp.index:=i;
             Transp.trFigure:=iFigure;
          end;
       end;
    end;
  end;
end;

procedure TSelectTool.MouseMove(APoint:TPoint);
var
  i:integer;
begin
  if not rBtnPressed then begin
    ADPoints[high(ADPoints)]:=ADoublePoint;
    inherited;
  end
  else if not Transp.transporate then begin
  for iFigure in Figures do begin
  if iFigure.Selected then begin
    if (iFigure.CheckRectangle(Wrld2Canvas(iFigure.LTop),Wrld2Canvas(iFigure.RBottom),FirstP)) then begin
    for i:=0 to High(iFigure.DPoints) do begin
       iFigure.DPoints[i].x += ((APoint.x - FirstP.x)/Zoom);
       iFigure.DPoints[i].y += ((APoint.y - FirstP.y)/Zoom);
     end;
     FirstP:=APoint;
     end;
    end;
  end;
  end
  else begin
  for iFigure in Figures do begin
    if iFigure.Selected then begin
      Transp.trFigure.DPoints[Transp.index].x += ((APoint.x - FirstP.x)/Zoom);
      Transp.trFigure.DPoints[Transp.index].y += ((APoint.y - FirstP.y)/Zoom);
      FirstP:=APoint;
    end;
   end;
  end;
end;

procedure TSelectTool.MouseUp();
begin
  if (Length(ADPoints)) = 2 then
    if (abs(ADPoints[0].x - ADPoints[1].x) < 2) and
       (abs(ADPoints[0].y - ADPoints[1].y) < 2) then
      SetLength(ADPoints, length(ADPoints) - 1);

  if (length(ADPoints) = 1) then begin
    for iFigure in Figures do begin
      iFigure.CheckPtIn(Wrld2Canvas(ADPoints[0]));
    end;
    SetLength(ADPoints, length(ADPoints)- 1);
  end;

  if (length(ADPoints) = 2) then begin
    for iFigure in Figures do
      iFigure.CheckRect(Wrld2Canvas(ADPoints[0]), Wrld2Canvas(ADPoints[1]));
    SetLength(ADPoints, length(ADPoints) - 2);
    end;

 if (Length(Figures)<>0) and (Figures[High(Figures)].ClassName = 'TSelect') then
    SetLength(Figures, length(Figures) - 1);
  if rBtnPressed then begin
    rBtnPressed:=false;
    Transp.transporate:=false;
    FirstP.Zero;
  end;
end;

procedure TSelectTool.PPanelCreate(APanel: TPanel);
begin
   bigselected:=false;
   lineselected:=false;
    for iFigure in Figures do begin
      if (iFigure.Selected) then begin
          GPColor:=iFigure.PColor;
          GPStyle:=iFigure.PStyle;
          GPWidth:=iFigure.PWidth;
          GRoundedX:=iFigure.RoundedX;
          GRoundedY:=iFigure.RoundedY;
          GBColor:=iFigure.BColor;
          GBStyle:=iFigure.BStyle;
          BrushStyle.Index:=iFigure.BStyleInd;
          PenStyle.Index:=iFigure.PStyleInd;
        if iFigure.ClassParent = TFillFigures then
          bigselected:=true
        else
          lineselected:=true;
      end;
    end;

  if lineselected then begin
    AParam.CreateComboBox(APanel, 'Pen Style', TypePenStyle.Name, PenStyle.Index, @AParam.SelectedPenStyleChange);
    AParam.CreateColorButton(APanel, 'Pen Color', GPColor, @AParam.SelectedPenColorButtonChanged);
    AParam.CreateSpinEdit(APanel, 'Pen Width', GPWidth, @AParam.SelectedPenWidthChange);
  end
  else if bigselected then begin
    if ((GRoundedY or GRoundedX)<> 0) then begin
      AParam.CreateSpinEdit(APanel, 'Round Y', GRoundedY, @AParam.SelectedRoundYChange);
      AParam.CreateSpinEdit(APanel, 'Round X', GRoundedX, @AParam.SelectedRoundXChange);
    end;
    AParam.CreateColorButton(APanel, 'Brush Color', GBColor, @AParam.SelectedBrushColorButtonChanged);
    AParam.CreateComboBox(APanel, 'Brush Style', TypeBrushStyle.Name, BrushStyle.Index, @AParam.SelectedBrushStyleChange);
    AParam.CreateComboBox(APanel, 'Pen Style', TypePenStyle.Name, PenStyle.Index, @AParam.SelectedPenStyleChange);
    AParam.CreateColorButton(APanel, 'Pen Color', GPColor, @AParam.SelectedPenColorButtonChanged);
    AParam.CreateSpinEdit(APanel, 'Pen Width', GPWidth, @AParam.SelectedPenWidthChange);
  end;
  AParam.CreateDeleteButton(Apanel,@AParam.DeleteFigure);

end;

procedure LayerDown;
var
  i, j: integer;
  Buff: array of TFigure;
begin
  j := high(Figures);
  SetLength(Buff, 0);

  for i := high(Figures) downto 0 do
    if (Figures[i].Selected) then begin
      SetLength(Buff, length(Buff) + 1);
      Buff[high(Buff)] := Figures[i];
    end else begin
      Figures[j] := Figures[i];
      Dec(j);
    end;

  for i := 0 to j do
    Figures[i] := Buff[j - i];
  end;

procedure LayerUp;
var
  i, j: integer;
  Buff: array of TFigure;
begin
  j := 0;
  SetLength(Buff, 0);

  for i := 0 to high(Figures) do
    if (Figures[i].Selected) then begin
      SetLength(Buff, length(Buff) + 1);
      Buff[high(Buff)] := Figures[i];
    end else begin
      Figures[j] := Figures[i];
      inc(j);
    end;

  for i := j to high(Figures) do
    Figures[i] := Buff[i - j];
end;

procedure TMagnifierTool.MouseDown(APoint:TPoint);
begin
  //FirstP:=APoint;
end;

procedure TMagnifierTool.MouseMove(APoint:TPoint);
begin

end;

procedure TMagnifierTool.MouseUp();
const
  ZoomStep=1;
begin
  {if (Button = mbLeft) then begin
    if Zoom=FloatSpinZoom.Value then
      if FloatSpinZoom.Value < ZoomStep then
        FloatSpinZoom.Value:=FloatSpinZoom.Value+(ZoomStep div 10)
      else
        FloatSpinZoom.Value:=FloatSpinZoom.Value+(ZoomStep);
    Zoom:=FloatSpinZoom.Value;
    Offset.x:=round(((Offset.x-x)*Zoom/LastZoom)+x);
    Offset.y:=round(((Offset.y-y)*Zoom/LastZoom)+y);
    LastZoom:=Zoom;
  end else if (Button = mbRight)then begin
    if Zoom=FloatSpinZoom.Value then
      if FloatSpinZoom.Value <= ZoomStep then
        FloatSpinZoom.Value:=FloatSpinZoom.Value-(ZoomStep div 10)
      else
        FloatSpinZoom.Value:=FloatSpinZoom.Value-(ZoomStep);
    Zoom:=FloatSpinZoom.Value;
    Offset.x:=round(((Offset.x-x)*Zoom/LastZoom)+x);
    Offset.y:=round(((Offset.y-y)*Zoom/LastZoom)+y);
    LastZoom:=Zoom;
  end;  }
end;

procedure TMagnifierTool.PPanelCreate(APanel: TPanel);
begin

end;

procedure TTool.writeUNDOFigures;
begin
  if not isEmpty(UndoRedoL) then begin
    //ShowMessage(UndoRedoL.Data[UndoRedoL.Data.Count-1]);
    //ShowMessage(IntToStr(UndoRedoL.Current));
    //ShowMessage(Undo(UndoRedoL));
    SetLength(Figures,0);
    LoadFile(Undo(UndoRedoL));
  end;
end;

procedure TTool.WriteREDOFigures;
begin
  if not isEmpty(UndoRedoL) then
    LoadFile(Redo(UndoRedoL));
end;

procedure TTool.FiguresDraw(pb:TPaintBox);
var
  i:integer;
  AFigure:TFigure;
begin
  for i:=0 to High(Figures) do begin
    AFigure:=Figures[i];
      AFigure.Draw(pb.Canvas);
  end;
end;

procedure RegisterTool(Tool: TTool; AFigureClass: TFigureClass;AName:String;APicName:String);
begin
  SetLength(Tools, Length(Tools) + 1);
  Tools[High(Tools)] := Tool;
  Tools[High(Tools)].FigureClass := AFigureClass;
  Tools[High(Tools)].Names:=AName;
  Tools[High(Tools)].Pic:=APicName;
end;

procedure RegisterBrushSt(AStyle: TBrushStyle; AName: string);
begin
  SetLength(TypeBrushStyle.Name, Length(TypeBrushStyle.Name)+1);
  SetLength(TypeBrushStyle.Style, Length(TypeBrushStyle.Style)+1);
  TypeBrushStyle.Name[High(TypeBrushStyle.Name)]:=AName;
  TypeBrushStyle.Style[High(TypeBrushStyle.Style)]:=AStyle;
end;

procedure RegisterPenSt(AStyle: TPenStyle; AName: string);
begin
  SetLength(TypePenStyle.Name, Length(TypePenStyle.Name)+1);
  SetLength(TypePenStyle.Style, Length(TypePenStyle.Style)+1);
  TypePenStyle.Name[High(TypePenStyle.Name)]:=AName;
  TypePenStyle.Style[High(TypePenStyle.Style)]:=AStyle;
end;

initialization
  RegisterTool(TLineTool.Create, TLine,'Line','assets/line.bmp');
  RegisterTool(TRectangleTool.Create, TRectangle,'Rectangle','assets/rectangle.bmp');
  RegisterTool(TEllipseTool.Create, TEllipse,'Ellipse','assets/ellipse.bmp');
  RegisterTool(TPolylineTool.Create, TLine,'Polyline','assets/lines.bmp');
  RegisterTool(THandTool.Create, nil ,'Hand', 'assets/hand.bmp');
  RegisterTool(TPenTool.Create, TPenLine,'Pen', 'assets/pencil.bmp');
  RegisterTool(TRoundRectTool.Create, TRoundRect,'RoundRect','assets/roundrect.bmp');
  //RegisterTool(TMagnifierTool.Create, nil ,'Magnifier','assets/pencil.bmp');
  RegisterTool(TSelectTool.Create, nil ,'Select','assets/select.bmp');

  RegisterBrushSt(bsBDiagonal, 'BDiagonal');
  RegisterBrushSt(bsFDiagonal, 'FDiagonal');
  RegisterBrushSt(bsCross, 'Cross');
  RegisterBrushSt(bsDiagCross, 'Diag Cross');
  RegisterBrushSt(bsHorizontal, 'Horizontal');
  RegisterBrushSt(bsVertical, 'Vertical');
  RegisterBrushSt(bsSolid, 'Solid');

  RegisterPenSt(psDash, 'Dash');
  RegisterPenSt(psDashDot, 'Dash-Dot');
  RegisterPenSt(psDashDotDot, 'Dash-Dot-Dot');
  RegisterPenSt(psDot, 'Dot');
  RegisterPenSt(psInsideframe, 'Inside Frame');
  RegisterPenSt(psSolid, 'Solid');
end.

